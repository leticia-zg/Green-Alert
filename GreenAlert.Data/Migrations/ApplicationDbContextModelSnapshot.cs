// <auto-generated />
using System;
using GreenAlert.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace GreenAlert.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenAlert.Core.Models.Alerta", b =>
                {
                    b.Property<Guid>("AlertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<double>("Valor")
                        .HasColumnType("BINARY_DOUBLE");

                    b.HasKey("AlertaId");

                    b.HasIndex("SensorId");

                    b.ToTable("ALERTA", (string)null);
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Estacao", b =>
                {
                    b.Property<Guid>("EstacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.HasKey("EstacaoId");

                    b.ToTable("ESTACAO", (string)null);
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Sensor", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("EstacaoId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("Unidade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.HasKey("SensorId");

                    b.HasIndex("EstacaoId");

                    b.ToTable("SENSOR", (string)null);
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Alerta", b =>
                {
                    b.HasOne("GreenAlert.Core.Models.Sensor", "Sensor")
                        .WithMany("Alertas")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Sensor", b =>
                {
                    b.HasOne("GreenAlert.Core.Models.Estacao", "Estacao")
                        .WithMany("Sensores")
                        .HasForeignKey("EstacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacao");
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Estacao", b =>
                {
                    b.Navigation("Sensores");
                });

            modelBuilder.Entity("GreenAlert.Core.Models.Sensor", b =>
                {
                    b.Navigation("Alertas");
                });
#pragma warning restore 612, 618
        }
    }
}
